#define pattern_calls_cxx
#include<iostream> 
#include<tuple>
#include <time.h>
#include "pattern_calls.h"
using namespace std; 
void calls::pattern_calls() 
{ 
  time_t start,end;
  time (&start); 
  double dif;
  // Book txt file for pattern calls
 ofstream output_pat; 
  Char_t patternFile[500];
  sprintf(patternFile,"src/patterns/Functional.pat");
  cout << "Opening a pat file with pattern calls " << patternFile << endl;
  output_pat.open(patternFile);
  output_pat << "pattern calls : \n" 
  << "id" << ","<< "name " <<","<< "patternFile" << ","<< "flag"<<endl;

  for (int i=0; i<50;i++) {
  tuple <int , string, string , string> call = calls::find_call(i, "Qamesh", "src/patterns/Functional.Pat", "true");
  output_pat << get< 0>(call) << ","<< get< 1>(call)<<","<< get<2>(call)<< "," << get< 3>(call)<< endl;
}

  output_pat.close();
  time(&end);
  dif = difftime(end,start);
  printf ("It took you %.2lf minutes to run your program.\n", (dif/60.0) );   
}

void calls::tuple <int , string, string , string> find_call(int id, string name, string patternFile, string Flag){
    return make_tuple(id,name, patternFile, Flag); 
	}; 

